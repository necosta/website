"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2079],{480:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"tech-hypes","metadata":{"permalink":"/website/blog/tech-hypes","editUrl":"https://github.com/necosta/website/tree/main/blog/4-tech-hypes.md","source":"@site/blog/4-tech-hypes.md","title":"Tech hypes/trends I\'ve witnessed","description":"Some of the software industry tech hypes (or trends) I\'ve witnessed through my career.","date":"2025-02-26T00:00:00.000Z","tags":[],"readingTime":6.325,"hasTruncateMarker":true,"authors":[{"name":"Nelson Costa","title":"Backend Developer and Data Engineer","url":"https://github.com/necosta","page":{"permalink":"/website/blog/authors/necosta"},"socials":{"x":"https://x.com/nelsoncosta85","github":"https://github.com/necosta"},"imageURL":"https://github.com/necosta.png","key":"necosta"}],"frontMatter":{"slug":"tech-hypes","title":"Tech hypes/trends I\'ve witnessed","authors":["necosta"],"tags":[],"date":"2025-02-26T00:00"},"unlisted":false,"nextItem":{"title":"Software laws to follow","permalink":"/website/blog/software-laws"}},"content":"Some of the software industry tech hypes (or trends) I\'ve witnessed through my career.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\nThese days AI dominates as the new trend and is definitely here to stay.\\nWhile I completely admire and praise the progress made these last years, I\'m also cautious as I\'ve seen too many times \\ntrends not keeping up with their promises and \\"the next big thing\\" just becoming the \\"hammer that makes everything look like a nail\\".\\n\\nHere are a few hypes (or let\'s call it disruptions \ud83d\ude0a) I\'ve witnessed over my career:\\n\\n### Big Data\\n\\nIt was around 2013 that I got introduced to Big Data and, as a Data Engineer, it truly excited me.\\n\\nFrom 5 years working on mainly SQL Server relational databases and data warehouses, it made sense to me the whole \\n\\"map-reduce\\" distributed jobs, capable of processing and aggregating huge amounts of data.\\n\\nThe hype was definitely there, and there was the temptation of solving all present and future problems with Big Data.\\n\\nThe biggest problem? Most projects didn\'t have lots of data to process so dealing with the \\"CAP theorem\\" challenges \\nof Big Data processes was simply not worth it.\\n\\nFrom someone working from a desk very close to the server room that had thousands of VMs running map-reduce jobs on top of HDFS \\non bare metal, it was great to witness the rise of cloud computing that allowed more companies to more easily \\ndeploy their jobs on Big Data clusters.\\nAlso from someone that worked with Yarn and Mesos and Spark version 1.4, it\'s been great to see how Big Data technologies evolved \\nand how stability improved. Running these days a Spark job on Databricks abstracts you of all the complexity of distributed systems.\\n\\nWas it a hype? Definitely not, it changed the industry. \\nBut sad to find companies applying \\"Big Data\\" processing with data that fits on a single VM and projects running \\nexpensive Spark ETL data pipelines that re-aggregate the exact same data every day.\\n\\n### Agile\\n\\nAgile arrived to me around 2012. I started having daily stand-ups (actually standing in a circle), sprint planning\\nand retrospectives. I\'ve been applying Agile methodology for more than 10 years and in most projects it worked relatively well.\\n\\nBut the biggest problem I have with it? Often the focus becomes the process and not the project goals.\\n\\nI think I share this opinion with other developers when I say:\\n- If no daily updates needed, no need for a daily meeting\\n- If we don\'t have clear specifications and well-defined roadmaps, no need for sprint planning\\n- If we can ship improvements every day, no need to wait till the end of the sprint to deploy\\n- If retrospectives outcomes are never actioned, no need for retrospectives\\n- And the list goes on...\\n\\nBut what\'s common on the above points is that often the Agile process just slows developers productivity.\\n\\nI worked in Scrum, Kanban, Scrumban and even SAFe (Scaled Agile) modes. \\nIn my opinion, SAFe is a huge productivity killer and Kanban is the most \\"agile\\" of all the Agile frameworks.\\n\\nAlso, the fact that it became a \\"hype\\" (all companies like to say they do Agile) left it misused, creating sometimes \\nredundant roles (if not done right) such as Agile coach and Scrum masters (nothing against these roles, just sometimes \\nthey can have the side effect of reducing the team focus and ownership if not done right).\\n\\nIn conclusion, and in my personal opinion, the focus should not be on following Agile just because it was (and remains) \\nthe most popular project management framework but on finding the processes which each development team feel more comfortable \\nand productive.\\n\\n### Microservices\\n\\nI started my career as a software developer deploying monolithic applications and only around 2016 microservices got introduced\\nto me mainly driven by Kubernetes adoption and explosion. \\n\\nI do have a very positive opinion about microservices. Concepts like \\"single responsibility\\" and \\"well-defined APIs\\" make \\nsense to me as I remember the issues I had maintaining huge code bases with a lot of dependencies.\\n\\nWith the years, I also learned by experience the issues of microservices architectures and there is one issue in particular \\nthat got under my skin. Far too often in these last years developing on microservices I ended up spending my time applying\\nthe same code change on multiple repositories. \\nNot because I had duplicate code, just because a lot of the changes and bug-fixes are traversal to many repositories.\\n\\nJumping between tens-to-hundreds of repositories is a downside of this approach as well as mapping and understanding each microservice \\n\\"role\\" in the overall architecture diagram. \\nWith the hype being focused on \\"microservices wins over monoliths\\" lots of projects moved in this direction without need.\\n\\nAlthough I have not mentioned all the advantages of building microservices, I do see it as a great scalable approach for software \\ndevelopment where, with efficient intra and cross-team communication, can work well.\\n\\nJust one final note on \\"microservices being the hammer that makes everything look like a nail\\", In 2022 I worked on a project\\nthat used a single repository (monorepo) with SBT multi-modules that deployed services without the need of Kubernetes, and it felt the \\noptimised approach for an efficient delivery of that project. \\nLesson being not all architectures need to be solved with microservices.\\n\\n### Blockchain\\n\\nOnly around 2018 I started feeling the hype around blockchain. Companies claiming they had projects on blockchain\\neven when it was obvious that all their use-case did not fit a solution with blockchain.\\n\\nUnlike Agile and Big Data, I feel this buzz was more short-lived. \\nA big number of companies grew on top of blockchain (Crypto, Web3, DeFi, NFT\'s, etc.) but it wasn\'t mass adopted.\\nNot that it does not have potential (definitely does), I guess the biggest issue was/is lack of real-world use cases.\\n\\nI don\'t have professional experience working with hyperledger/blockchain, but I did go to conferences in Lisbon about it \\nand witnessed once again the fail of \\"promises given with caution\\" on the explosion of blockchain based startups in the \\nperiod 2018-2020.\\n\\n### AI\\n\\nPerhaps just because it\'s the most recent \\"new big thing\\", the impact is felt stronger.\\n\\nJust like Google search left us without having to memorize, and the calculator left us without needing to perform mental calculations,\\nfeels that AI LLM GPTs are here to provide all answers to any question (including writing source code without the need of humans).\\n\\nWe see many companies looking to integrate with \\"new AI\\", even when they don\'t have use cases for it (some are using ML for years\\nand don\'t understand that ML is a branch of AI).\\n\\nAs with all other \\"hypes\\", I believe we should remain down-to-earth, understand the benefits this technology brings but\\nalso reflect on all the consequences of the usage of AI.\\nWe definitely don\'t want humans interacting with AI chatbots that \\"go in circle\\" (happens to me often), and we definitely \\ndon\'t want the next generation to lose creativity and reasoning because of AI \\"easy quick\\" outputs.\\nBut we do want AI leveraging the human on all tasks that it performs better without ever failing to respect the 3 H\'s: \\nHonest, Harmless and Helpful.\\n\\nI believe the next years we will see changes on the way software developers interact with software, becoming more productive \\nand focused on quality and optimisations. \\nI\'m not convinced yet developers are replaceable as innovation is not something currently AI can do (it leverages massive amounts \\nof written text but can\'t bring to life new concepts) but time will tell..."},{"id":"software-laws","metadata":{"permalink":"/website/blog/software-laws","editUrl":"https://github.com/necosta/website/tree/main/blog/3-software-principles.md","source":"@site/blog/3-software-principles.md","title":"Software laws to follow","description":"Some of the most import software laws to be aware of.","date":"2025-02-05T00:00:00.000Z","tags":[],"readingTime":0.935,"hasTruncateMarker":true,"authors":[{"name":"Nelson Costa","title":"Backend Developer and Data Engineer","url":"https://github.com/necosta","page":{"permalink":"/website/blog/authors/necosta"},"socials":{"x":"https://x.com/nelsoncosta85","github":"https://github.com/necosta"},"imageURL":"https://github.com/necosta.png","key":"necosta"}],"frontMatter":{"slug":"software-laws","title":"Software laws to follow","authors":["necosta"],"tags":[],"date":"2025-02-05T00:00"},"unlisted":false,"prevItem":{"title":"Tech hypes/trends I\'ve witnessed","permalink":"/website/blog/tech-hypes"},"nextItem":{"title":"My programming language ranking","permalink":"/website/blog/lang-ranking"}},"content":"Some of the most import software laws to be aware of.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n### Goodhart\'s Law\\n\\n> When a measure becomes a target, it ceases to become a good measure\\n\\n### Murphy\'s Law\\n\\n> Anything that can go wrong, will go wrong\\n\\n### Conway\'s Law\\n\\n> Organizations design systems that mirror their own communication structure\\n\\n### Amdahl\'s Law\\n\\n> The performance improvement gained by optimizing a single part of a system is limited \\n> by the fraction of time that the improved part is actually used\\n\\n### Parkinson\'s Law\\n\\n> Work expands to fill the time available for its completion\\n\\n### Brooks\'s Law\\n\\n> Adding manpower to a late software project makes it later\\n\\n### Segal\'s Law\\n\\n> A man with a watch knows what time it is. A man with two watches is never sure\\n\\n### Cunningham\'s Law\\n\\n> The best way to get the right answer from a community is not to ask a question, it\'s to post the wrong answer\\n\\n### Humphrey\'s Law\\n\\n> The user will never know what they want until after they use it (and maybe not even then)"},{"id":"lang-ranking","metadata":{"permalink":"/website/blog/lang-ranking","editUrl":"https://github.com/necosta/website/tree/main/blog/2-lang-ranking.md","source":"@site/blog/2-lang-ranking.md","title":"My programming language ranking","description":"My personal ranking of programming languages (just because I feel like it).","date":"2025-02-04T00:00:00.000Z","tags":[],"readingTime":1.79,"hasTruncateMarker":true,"authors":[{"name":"Nelson Costa","title":"Backend Developer and Data Engineer","url":"https://github.com/necosta","page":{"permalink":"/website/blog/authors/necosta"},"socials":{"x":"https://x.com/nelsoncosta85","github":"https://github.com/necosta"},"imageURL":"https://github.com/necosta.png","key":"necosta"}],"frontMatter":{"slug":"lang-ranking","title":"My programming language ranking","authors":["necosta"],"tags":[],"date":"2025-02-04T00:00"},"unlisted":false,"prevItem":{"title":"Software laws to follow","permalink":"/website/blog/software-laws"},"nextItem":{"title":"My professional journey","permalink":"/website/blog/professional-journey"}},"content":"My personal ranking of programming languages (just because I feel like it).\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n### The winner - Scala\\n\\nAnyone that knows me well, knows that I rank Scala as the best, most enjoyable language to write software code.\\n\\nThe flexibility it provides (from more \\"Java-like\\" structure to pure functional code), and the expressiveness of the \\nlanguage (pattern matching, higher-order functions), I feel I can both write and understand the code with ease.\\n\\nI also love SBT (Build Tool) and all the features it provides, I feel a productive developer when building applications in Scala.\\n\\nI understand and respect the criticism on the steep learning curve it requires. \\nBut personally I would rather invest on climbing that learning curve and have a more solid and maintainable application \\nthan pay the price of developing on another language and have bugs, runtime exceptions and/or poor maintainability \\ndown the road.\\n\\n### Strong seconds - Kotlin, Java, Crystal, Rust\\n\\nI had the chance at some point of my life to try these programming languages and I had a good experience about all of them.\\n\\nKotlin felt to me a \\"better Java\\", not excessive boilerplate code, I could quickly understand and become productive on a new repository.\\n\\nCrystal lang is not widely used but, for my sandbox projects, I enjoyed the simplicity and performance of this language.\\n\\nFinally, Rust. I definitely need more experience with the language, but I enjoyed the language features, \\ndidn\'t feel too hard to start developing on Rust.\\n\\n### Not my cup of tea - Go and Python\\n\\nI have used in the past both Go and Python, and can\'t say it was a positive experience.\\n\\nWith Go, I struggled with libraries dependency management as well as the lack of generics and advanced features. Always\\nfelt I had to write a lot of code to do some simple operations.\\n\\nWith Python, I struggled with runtime bugs simply because of no type checking and what felt to me a poor testing setup.\\nOn top of all known criticisms of the language (such as poor performance and scaling issues), I would not use Python \\non a live production application."},{"id":"professional-journey","metadata":{"permalink":"/website/blog/professional-journey","editUrl":"https://github.com/necosta/website/tree/main/blog/1-professional-journey.md","source":"@site/blog/1-professional-journey.md","title":"My professional journey","description":"My professional journey, technologies, highlights and life-long impressions.","date":"2025-01-31T00:00:00.000Z","tags":[],"readingTime":9.4,"hasTruncateMarker":true,"authors":[{"name":"Nelson Costa","title":"Backend Developer and Data Engineer","url":"https://github.com/necosta","page":{"permalink":"/website/blog/authors/necosta"},"socials":{"x":"https://x.com/nelsoncosta85","github":"https://github.com/necosta"},"imageURL":"https://github.com/necosta.png","key":"necosta"}],"frontMatter":{"slug":"professional-journey","title":"My professional journey","authors":["necosta"],"tags":[],"date":"2025-01-31T00:00"},"unlisted":false,"prevItem":{"title":"My programming language ranking","permalink":"/website/blog/lang-ranking"}},"content":"My professional journey, technologies, highlights and life-long impressions.\\n\\n\x3c!-- truncate --\x3e\\n\\n---\\n\\n# My professional journey\\n\\nOn this first blog post I want to tell you about my professional journey.\\n\\nSo much has changed since I finished university, doesn\'t feel it was 17 years ago, time really flies.\\n\\nAfter four and a half wonderful years studying in Porto and a life changing six months Erasmus exchange programme \\nin Brno, Czech Republic I started my professional career in Lisbon.\\n\\n### Accenture - Lisbon\\n\\nI\'m so grateful for [Accenture](https://www.accenture.com/pt-pt) giving me a first chance as a software/data engineer. \\nWith my degree on Electrical and Computer Engineering I definitely didn\'t feel I was ready for the challenges ahead, \\nbut I found a very supportive team that I really learned a lot with.\\n\\nGoing every morning with a suit on, to the beautiful offices in Amoreiras Tower, does feel a bit different from nowadays \\nworking casually dressed from home. Life as a consultant was different back then. \ud83d\ude05\\n\\nI remember joining in Nov08 and having as a first challenge a data migration project with a very tight deadline (had to go live\\nJanuary first). The migration was configured on SSIS (SQL Server Integration Services) and involved moving all data from \\na client database to a generic SAP database.\\n\\nAs a junior Data Engineer I quickly had to improve my very basic university SQL knowledge to contribute to this project \\nas well as learn new ways of testing and validating the ETL.\\n\\nThe migration was a success so 2009 started with new responsibilities.\\n\\nFor that same client, I started working on evolving their SSAS (SQL Server Analytical Services) OLAP (Online Analytical Processing) solution.\\nAlso known as a data warehouse, I built SQL and MDX (Multidimensional Expressions) queries, also taking tasks on \\nSSRS (SQL Server Reporting Services) building reports for client analysts to access. \\nDuring 2009 and 2010 I had my first go as a software developer. The client application was built on VB.NET (Visual Basic) and \\nthere I performed my first code changes, mainly bug fixes.\\nCode was versioned controlled on SVN (Subversion), since then I always used Git.\\n\\nI was lucky to have worked on a team of such smart individuals that fostered a supportive environment for my first steps as a developer.\\nSpecial mention to lunch hour, we worked hard in the office but lunchtime was sacred, we all went together to this\\nspecial hidden gem of a restaurant where food was beyond delicious. \ud83e\udd24\\n\\n### Quantium - Sydney\\n\\nAfter two years working in Lisbon, I decided to live and work in the country that I was born and was always curious to go \\n(I left Australia when I was six years old). I didn\'t go to Australia with a job already locked, I decided to start \\nlooking for one once I arrived, and I was fortunate that [Quantium](http://www.quantium.com/) believed in my strengths \\nand employed me only three weeks after my arrival.\\n\\nThe environment I found was of a startup. This is, a small group of developers working with ambition and excitement, \\nand very proud of their work.\\n\\nI started working on a product for an Australian industrial gas company, that enabled account managers to go into rural \\nareas without internet and obtain the RSP (recommended sales price) for their customers based on factors such as quantity and \\ndistance (a lot of actuarial work was put in the RSP).\\nIt was developed on C#, I took responsibilities mainly at a database level, building SQL views and stored procedures \\non a MSSQL Server database. Interestingly enough, despite English not being my first language, I quickly also took responsibilities \\non on-call support, being on the phone with account managers faced with the occasional issue on the app.\\n\\nThe number of developers was small (around 25) and we had a very relaxed environment.\\nI felt welcomed and worked hard to deliver quality work on the SQL side while also learning how to develop on C#.\\n\\nIt was on my second year of that project that the company got investment to build a v2 app for the global market.\\nThe team immediately grew and I spent the next two years working both on SQL and C# integrating each market SAP databases \\nand models into a unified global database.\\n\\nIf my memory is accurate, we integrated at least 8 markets, providing RSP and other features, on industrial gas, delivery, handling and safety equipment.\\nDuring those years I got much more proficient programming on C#, keeping my main role on SQL and data engineering.\\n\\nThis company marked my professional life in so many ways. The \\"Australian way\\" of working hard with ambition but with a \\nwork-life balance, the beautiful office with a view to the Sydney Harbour Bridge and Opera House, the lunch breaks playing football at\\nthe botanical gardens, I keep such great vivid memories of my time there.\\n\\nAround 2014, after four years working for the industrial gas industry, I changed scope and landed within the same company \\nin Media. I worked on three ETL projects, doing customer segmentation alike projects and there I got a first taste of big data, machine learning\\nand Scala.\\n\\nWith an \\"in-house\\" big data cluster, we could hear the \\"roar\\" from the server room as data stored in HDFS (Hadoop File System),\\nprocessed with Hadoop MapReduce (then Apache Spark), and orchestrated with Apache Mesos, provided the aggregations. \\nWorking with very smart data scientists, I started understanding ML concepts like supervised learning and GBT (Gradient Boosted Trees).\\n\\nI was very lucky to start at an early stage working with Scala and Spark (which was still on unstable version 1.4) and Machine Learning.\\nI worked for more than one year on the exciting and new Big Data world before making the hard decision to return to Portugal.\\n\\n### Nokia - Lisbon\\n\\nI arrived back to Portugal on the summer of 2016. \\nI wasn\'t looking straight away for a new opportunity, so I took some time off to follow Portugal on their Euro2016 winning campaign\\nand I did a Euro trip, visiting seven countries that summer.\\nI was also looking into ideas to open my own company, but I was unsuccessful in that regard.\\n\\nTherefore, I started applying to new job offers and in January 2017 I started as a Big Data Engineer at [Nokia](https://www.nokia.com/).\\nThe project was an interesting one, build a PaaS (Platform as a Service) integrating open-source tools into a unified suite.\\n\\nThis project had its own challenges, not necessarily creating business logic but integrating components from Keycloak (IAM solution), \\nApache Zeppelin (Notebooks for data analysis), Kong (API gateway), Cassandra (NoSQL database), etc., into a seamless suite. \\nWe used Scala as the main language for integration, load and smoke tests. \\nI was able to develop my skills in this language, specially because I was in luck pairing with one \\nof the best Scala developers I have met. He opened my perspective on so many aspects from architecture/design to open-source and community.\\n\\nI was also able to travel, going twice to Finland (once in summer witnessing midnight sunsets, once in winter witnessing heavy snow and 3pm sunsets) \\nand once to India (an incredible experience).\\n\\nDespite my role as Big Data Engineer, I was more and more working on software development and less on databases, also contributing\\non open source projects. Therefore, I started looking for a new challenge where I could have more impact as a developer.\\n\\n### tb.lx by Daimler Trucks - Lisbon\\n\\nThat exciting opportunity finally arrived in November 2018 where I was able to be part of the initial team of [tb.lx](https://www.tblx.io/), \\na startup within the corporate, built to expedite software development for Daimler Trucks and Buses.\\n\\nIt was exciting because right from day one (when we were just assembling furniture waiting for our laptops to arrive) \\nwe grew an exceptional team dynamic.\\nWe had data scientists and developers with a \\"green field\\" to explore the potential of such a huge amount of telemetry data coming out of trucks and buses.\\n\\nGiven my already acquired experience, I defined best practices and processes within the company. \\nFrom defining our artifactory server to code reviews and quality checks, interviewing new candidates, etc. I took a wide range of responsibilities.\\n\\nI was also able to travel, going several times to Germany and once to the USA.\\nOn a more technical level, microservices were built mainly in JVM languages (mainly Scala, also Kotlin and Java), all managed in Kubernetes and deployed in Azure.\\n\\nI worked with a variety of processing tools, from Apache Kafka to Apache Flink, also Apache Spark, delivering business value \\nfor fleet managers from eco-drive feedback, trip segmentation, and other interesting use cases.\\n\\nIf it was not the global pandemic of 2020 I would be perhaps still be working there, as I met some of the most wonderful people\\nto work with. But life had other plans for me...\\n\\n### 47 degrees / Xebia Functional - San Fernando / Seville\\n\\nAs for almost everyone, March 2020 brought a big change to our lives. From going to the office, we were now working from \\nhome waiting for an end to the disruption. It made us reflect on our purpose and, for me, it was the time I built a deep\\nrelationship with who is now my wife and partner in life.\\n\\nWe took the decision to move to Spain in November 2021. I joined a company named 47 degrees (bought by [Xebia](https://xebia.com/) in 2022) \\nthat was under my radar for a long time. A company expert on Scala and Functional programming, \\nan area that always fascinated me but that I never had practical experience.\\n\\nI did not regret it. I met such nice, welcoming and kind people and I encountered a work environment that allowed me to \\nlearn and grow so much in such few years.\\n\\nI initially started on a project for a Japanese fintech company. Heavily using Scala Cats and Http4s libraries, running on GCP,\\nI wasn\'t on my comfort zone, but I quickly got up to speed with the fast pace of the project. \\n\\nIt was only a 6 months project, but I really enjoyed it and I treasure it as one of the best projects I worked for (worked \\nwith really talented developers there). \\n\\nI then moved to a UK project on collecting and processing telemetry data, this time from cars. \\nI had some previous experience but the technologies used were different as well as the focus. The main objectives were \\nensuring data normalisation and validation. Also, I often had a \\"dev-ops\\" hat, on infrastructure concerns, \\nrather than software development.\\n\\nAfter one year in this project, I joined a US client with an ambitious project requiring a huge team of developers, \\nrebuilding a data streaming platform for online radio streaming. \\nUsing Scala Cats and Typelevel stack (http4s, circe, feral, ...), and with a tight deadline, \\nwe delivered successfully the new platform.\\nI feel I improved in so many different aspects in this project, from specification to API definition, tests and deployment, \\nI definitely feel I grew once again as an engineer.\\n\\n2024 was also a year of change with the birth of my daughter, definitely changing my perspective of life.\\n\\nNot sure what lies ahead, for now this is all I got. Hope you enjoyed it. \ud83d\ude0a"}]}}')}}]);