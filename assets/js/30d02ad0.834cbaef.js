"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4589],{924:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"development/programming-paradigms","title":"Programming paradigms","description":"A deep-dive into programming paradigms:","source":"@site/docs/development/programming-paradigms.md","sourceDirName":"development","slug":"/development/programming-paradigms","permalink":"/website/docs/development/programming-paradigms","draft":false,"unlisted":false,"editUrl":"https://github.com/necosta/website/tree/main/docs/development/programming-paradigms.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"AI and ML","permalink":"/website/docs/development/ml-ai"},"next":{"title":"Technology","permalink":"/website/docs/category/technology"}}');var t=i(4848),s=i(8453);const a={sidebar_position:6},o="Programming paradigms",l={},c=[{value:"Functional programming",id:"functional-programming",level:2},{value:"Object oriented programming",id:"object-oriented-programming",level:2},{value:"Imperative programming",id:"imperative-programming",level:2},{value:"Reactive programming",id:"reactive-programming",level:2},{value:"Which One to Use?",id:"which-one-to-use",level:2}];function d(e){const n={h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"programming-paradigms",children:"Programming paradigms"})}),"\n",(0,t.jsx)(n.p,{children:"A deep-dive into programming paradigms:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Functional programming"}),"\n",(0,t.jsx)(n.li,{children:"Object oriented programming"}),"\n",(0,t.jsx)(n.li,{children:"Imperative programming"}),"\n",(0,t.jsx)(n.li,{children:"Reactive Programming"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"functional-programming",children:"Functional programming"}),"\n",(0,t.jsx)(n.p,{children:"Treats computation as the evaluation of pure functions, avoiding mutable state and side effects"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pure Functions: No side effects; same input always gives the same output"}),"\n",(0,t.jsx)(n.li,{children:"Immutability: No variable mutations; state changes create new data structures"}),"\n",(0,t.jsx)(n.li,{children:"Higher-Order Functions: Functions can take other functions as arguments"}),"\n",(0,t.jsx)(n.li,{children:"Composition: Functions are combined to build complex logic"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.strong,{children:"Scala"}),", ",(0,t.jsx)(n.strong,{children:"Haskell"}),", ",(0,t.jsx)(n.strong,{children:"Clojure"})]}),"\n",(0,t.jsx)(n.h2,{id:"object-oriented-programming",children:"Object oriented programming"}),"\n",(0,t.jsx)(n.p,{children:"Organizes code around objects that encapsulate state (fields) and behavior (methods)"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Groups related data & behavior into objects (Encapsulation)"}),"\n",(0,t.jsx)(n.li,{children:"Enables code reuse via class hierarchies (Inheritance)"}),"\n",(0,t.jsx)(n.li,{children:"Objects of different types can be treated uniformly (Polymorphism)"}),"\n",(0,t.jsx)(n.li,{children:"State encapsulated in objects, often mutable"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.strong,{children:"Java"}),", ",(0,t.jsx)(n.strong,{children:"C#"}),", ",(0,t.jsx)(n.strong,{children:"C++"})]}),"\n",(0,t.jsx)(n.h2,{id:"imperative-programming",children:"Imperative programming"}),"\n",(0,t.jsx)(n.p,{children:"Focuses on explicitly defining a sequence of commands that change program state"}),"\n",(0,t.jsx)(n.p,{children:"Uses mutable state and control structures (loops, conditionals)"}),"\n",(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.strong,{children:"C"}),", ",(0,t.jsx)(n.strong,{children:"Rust"})]}),"\n",(0,t.jsx)(n.h2,{id:"reactive-programming",children:"Reactive programming"}),"\n",(0,t.jsx)(n.p,{children:"Programming with asynchronous data streams where changes propagate automatically"}),"\n",(0,t.jsx)(n.p,{children:"Ideal for real-time applications, event-driven systems, UI frameworks"}),"\n",(0,t.jsxs)(n.p,{children:["Example: ",(0,t.jsx)(n.strong,{children:"Akka streams"}),", ",(0,t.jsx)(n.strong,{children:"React"})]}),"\n",(0,t.jsx)(n.h2,{id:"which-one-to-use",children:"Which One to Use?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Use FP when working with data transformations, parallelism, or writing highly maintainable code"}),"\n",(0,t.jsx)(n.li,{children:"Use OOP when modeling real-world entities with behavior"}),"\n",(0,t.jsx)(n.li,{children:"Use Imperative when performance optimization or low-level control is needed"}),"\n",(0,t.jsx)(n.li,{children:"Use Reactive when dealing with event-driven, async flows (e.g., UIs, distributed systems, real-time analytics)"}),"\n"]})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var r=i(6540);const t={},s=r.createContext(t);function a(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);