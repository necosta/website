"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1256],{6340:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"technology/akka-pekko","title":"Pekko","description":"Apache Pekko (previously Akka) uses the Actor Model which is a concurrency paradigm designed for scalable","source":"@site/docs/technology/akka-pekko.md","sourceDirName":"technology","slug":"/technology/akka-pekko","permalink":"/website/docs/technology/akka-pekko","draft":false,"unlisted":false,"editUrl":"https://github.com/necosta/website/tree/main/docs/technology/akka-pekko.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Scala Cats","permalink":"/website/docs/technology/scala-cats"},"next":{"title":"Other","permalink":"/website/docs/category/other"}}');var t=s(4848),r=s(8453);const a={sidebar_position:6},l="Pekko",c={},o=[{value:"Characteristics",id:"characteristics",level:2},{value:"Streams",id:"streams",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"pekko",children:"Pekko"})}),"\n",(0,t.jsx)(n.p,{children:"Apache Pekko (previously Akka) uses the Actor Model which is a concurrency paradigm designed for scalable\nand fault-tolerant applications."}),"\n",(0,t.jsx)(n.p,{children:"An Actor is a lightweight, independent unit of computation that:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Processes messages asynchronously"}),"\n",(0,t.jsx)(n.li,{children:"Maintains internal state, which is not directly accessible"}),"\n",(0,t.jsx)(n.li,{children:"Can create new actors (actor hierarchy)"}),"\n",(0,t.jsx)(n.li,{children:"Can communicate with other actors using message-passing"}),"\n",(0,t.jsx)(n.li,{children:"Can handle failures using a supervision strategy"}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"characteristics",children:"Characteristics"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Concurrency and Scalability"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Lightweight Threads: Millions of actors can exist in an application because they run on top of a thread pool (",(0,t.jsx)(n.code,{children:"system.dispatcher"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Message-Driven: Uses non-blocking message-passing for high-throughput systems."}),"\n",(0,t.jsx)(n.li,{children:"Distributed by Default: Can run on multiple machines without significant changes."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsx)(n.li,{children:"Fault Tolerance (Supervision Model)"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'Actors follow a "let it crash" philosophy.'}),"\n",(0,t.jsx)(n.li,{children:"Parent actors supervise children and can decide to restart, resume, or stop them if they fail."}),"\n",(0,t.jsx)(n.li,{children:"This makes applications resilient to failures."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"3",children:["\n",(0,t.jsx)(n.li,{children:"Location Transparency and Remote Actors"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You can send messages to actors running on different nodes (machines) as if they were local."}),"\n",(0,t.jsx)(n.li,{children:"This enables distributed computing and microservices architectures."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"Streaming and Event-Driven Processing"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pekko Streams (like Akka Streams) provides reactive stream processing, handling backpressure automatically."}),"\n",(0,t.jsx)(n.li,{children:"Works well with event-driven architectures."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"5",children:["\n",(0,t.jsx)(n.li,{children:"Persistence and State Management"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pekko Persistence allows actors to retain their state across restarts using event sourcing."}),"\n",(0,t.jsx)(n.li,{children:"Useful for applications that require fault tolerance and historical state tracking."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"6",children:["\n",(0,t.jsx)(n.li,{children:"Cluster and Sharding"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pekko Cluster enables scaling across multiple nodes dynamically."}),"\n",(0,t.jsx)(n.li,{children:"Cluster Sharding helps distribute actors across a cluster based on entity IDs."}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{start:"7",children:["\n",(0,t.jsx)(n.li,{children:"HTTP and Integration"}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Pekko HTTP (like Akka HTTP) allows you to build RESTful and WebSocket APIs."}),"\n",(0,t.jsx)(n.li,{children:"Integrates with Kafka, gRPC, and other distributed systems."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"streams",children:"Streams"}),"\n",(0,t.jsx)(n.p,{children:"Reactive, asynchronous, and backpressure-aware stream processing library."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Sources - Producers of data"}),"\n",(0,t.jsx)(n.li,{children:"Sinks - Consumers of data"}),"\n",(0,t.jsx)(n.li,{children:"Flows - Transformations"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(6540);const t={},r=i.createContext(t);function a(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);